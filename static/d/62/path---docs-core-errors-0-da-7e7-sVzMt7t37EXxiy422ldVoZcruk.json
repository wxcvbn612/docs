{"pageContext":{"html":"<h1 id=\"errors-handling\"><a href=\"#errors-handling\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Errors Handling</h1>\n<p>API Platform comes with a powerful error system. It handles expected (such as faulty JSON documents sent by the\nclient or validation errors) as well as unexpected errors (PHP exceptions and errors).\nAPI Platform automatically sends the appropriate HTTP status code to the client: <code class=\"language-text\">400</code> for expected errors, <code class=\"language-text\">500</code> for\nunexpected ones. It also provides a description of the error in <a href=\"http://www.hydra-cg.com/spec/latest/core/#description-of-http-status-codes-and-errors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Hydra error format</a>\nor in the format described in the <a href=\"https://tools.ietf.org/html/rfc7807\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 7807</a>, depending of the format selected during the <a href=\"/docs/core/content-negotiation/\">content negotiation</a>.</p>\n<h2 id=\"converting-php-exceptions-to-http-errors\"><a href=\"#converting-php-exceptions-to-http-errors\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Converting PHP Exceptions to HTTP Errors</h2>\n<p>The framework also allows to configure the HTTP status code sent to the clients when custom exceptions are thrown.</p>\n<p>In the following example, we throw a domain exception from the business layer of the application and\nconfigure API Platform to convert it to a <code class=\"language-text\">404 Not Found</code> error:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Exception/ProductNotFoundException.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exception</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductNotFoundException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Exception</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/EventSubscriber/CartManager.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>EventSubscriber</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>EventListener<span class=\"token punctuation\">\\</span>EventPriorities</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>Product</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>ProductNotFoundException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>EventDispatcher<span class=\"token punctuation\">\\</span>EventSubscriberInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpKernel<span class=\"token punctuation\">\\</span>Event<span class=\"token punctuation\">\\</span>GetResponseForControllerResultEvent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpKernel<span class=\"token punctuation\">\\</span>KernelEvents</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductManager</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventSubscriberInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSubscribedEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            KernelEvents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">VIEW</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'checkProductAvailability'</span><span class=\"token punctuation\">,</span> EventPriorities<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">PRE_VALIDATE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">checkProductAvailability</span><span class=\"token punctuation\">(</span>GetResponseForControllerResultEvent <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$product</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$event</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getControllerResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$product</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Product</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token variable\">$event</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isMethodSafe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isPubliclyAvailable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Using internal codes for a better understanding of what's going on</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The product \"%s\" does not exist.'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$product</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>If you use the standard distribution of API Platform, this event listener will be automatically registered. If you use a\ncustom installation, <a href=\"/docs/core/events/\">learn how to register listeners</a>.</p>\n<p>Then, configure the framework to catch <code class=\"language-text\">App\\Exception\\ProductNotFoundException</code> exceptions and convert them in <code class=\"language-text\">404</code>\nerrors:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">exception_to_status</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># The 4 following handlers are registered by default, keep those lines to prevent unexpected side effects</span>\n        <span class=\"token key atrule\">Symfony\\Component\\Serializer\\Exception\\ExceptionInterface</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400 </span><span class=\"token comment\"># Use a raw status code (recommended)</span>\n        <span class=\"token key atrule\">ApiPlatform\\Core\\Exception\\InvalidArgumentException</span><span class=\"token punctuation\">:</span> 'HTTP_BAD_REQUEST' <span class=\"token comment\"># Or a `Symfony\\Component\\HttpFoundation\\Response`'s constant</span>\n        <span class=\"token key atrule\">ApiPlatform\\Core\\Exception\\FilterValidationException</span><span class=\"token punctuation\">:</span> <span class=\"token number\">400</span>\n        <span class=\"token key atrule\">Doctrine\\ORM\\OptimisticLockException</span><span class=\"token punctuation\">:</span> <span class=\"token number\">409</span>\n\n        <span class=\"token comment\"># Custom mapping</span>\n        <span class=\"token key atrule\">App\\Exception\\ProductNotFoundException</span><span class=\"token punctuation\">:</span> <span class=\"token number\">404 </span><span class=\"token comment\"># Here is the handler for our custom exception</span></code></pre></div>\n<p>Any type of <code class=\"language-text\">Exception</code> can be thrown, API Platform will convert it to a Symfony's <code class=\"language-text\">HttpException</code>. The framework also takes\ncare of serializing the error description according to the request format. For instance, if the API should respond in JSON-LD,\nthe error will be returned in this format as well:</p>\n<p><code class=\"language-text\">GET /products/1234</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/contexts/Error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"hydra:title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"An error occurred\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"hydra:description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The product \\\"1234\\\" does not exist.\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","editPath":"core/errors.md","title":"Errors Handling","previous":{"slug":"/docs/core/default-order/","title":"Overriding Default Order"},"next":{"slug":"/docs/core/external-vocabularies/","title":"Using External Vocabularies"}}}