{"pageContext":{"html":"<h1 id=\"the-event-system\"><a href=\"#the-event-system\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Event System</h1>\n<p>API Platform Core implements the <a href=\"https://github.com/pmjones/adr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Action-Domain-Responder</a> pattern. This implementation\nis covered in depth in the <a href=\"/docs/core/operations/#creating-custom-operations-and-controllers\">Creating custom operations and controllers</a>\nchapter.</p>\n<p>Basically, API Platform Core execute an action class that will return an entity or a collection of entities. Then a series\nof event listeners are executed which validate the data, persist it in database, serialize it (typically in a JSON-LD document)\nand create an HTTP response that will be sent to the client.</p>\n<p>To do so, API Platform Core leverages <a href=\"https://symfony.com/doc/current/reference/events.html#kernel-events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">events triggered by the Symfony HTTP Kernel</a>.\nYou can also hook your own code to those events. They are handy and powerful extension points available at all points\nof the request lifecycle.</p>\n<p>In the following example, we will send a mail each time a new book is created using the API:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/EventSubscriber/BookMailSubscriber.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>EventSubscriber</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>EventListener<span class=\"token punctuation\">\\</span>EventPriorities</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>EventDispatcher<span class=\"token punctuation\">\\</span>EventSubscriberInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpKernel<span class=\"token punctuation\">\\</span>Event<span class=\"token punctuation\">\\</span>GetResponseForControllerResultEvent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpKernel<span class=\"token punctuation\">\\</span>KernelEvents</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookMailSubscriber</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventSubscriberInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$mailer</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>\\<span class=\"token package\">Swift_Mailer</span> <span class=\"token variable\">$mailer</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">mailer</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$mailer</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSubscribedEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            KernelEvents<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">VIEW</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'sendMail'</span><span class=\"token punctuation\">,</span> EventPriorities<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">POST_WRITE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span>GetResponseForControllerResultEvent <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$book</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$event</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getControllerResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$method</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$event</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$book</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Book</span> <span class=\"token operator\">||</span> Request<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">METHOD_POST</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$method</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$message</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Swift_Message</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'A new book has been added'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'system@example.com'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'contact@les-tilleuls.coop'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setBody</span><span class=\"token punctuation\">(</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The book #%d has been added.'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">mailer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>If you use the official API Platform distribution, creating the previous class is enough. The Symfony Dependency Injection\ncomponent will automatically register this subscriber as a service and will inject its dependencies thanks to the <a href=\"http://symfony.com/doc/current/components/dependency_injection/autowiring.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">autowiring\nfeature</a>.</p>\n<p>Alternatively, <a href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#creating-an-event-listener\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the subscriber must be registered manually</a>.</p>\n<p>Doctrine events (<a href=\"http://doctrine-orm.readthedocs.org/en/latest/reference/events.html#reference-events-lifecycle-events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ORM</a>, <a href=\"https://www.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/reference/events.html#lifecycle-events\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MongoDB ODM</a>)\nare also available (if you use it) if you want to hook at the object lifecycle events.</p>\n<p>Built-in event listeners are:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Event</th>\n<th>Pre &#x26; Post hooks</th>\n<th>Priority</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">AddFormatListener</code></td>\n<td><code class=\"language-text\">kernel.request</code></td>\n<td>None</td>\n<td>7</td>\n<td>guess the best response format (<a href=\"/docs/core/content-negotiation/\">content negotiation</a>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ReadListener</code></td>\n<td><code class=\"language-text\">kernel.request</code></td>\n<td><code class=\"language-text\">PRE_READ</code>, <code class=\"language-text\">POST_READ</code></td>\n<td>4</td>\n<td>retrieve data from the persistence system using the <a href=\"/docs/core/data-providers/\">data providers</a> (<code class=\"language-text\">GET</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">DELETE</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">DeserializeListener</code></td>\n<td><code class=\"language-text\">kernel.request</code></td>\n<td><code class=\"language-text\">PRE_DESERIALIZE</code>, <code class=\"language-text\">POST_DESERIALIZE</code></td>\n<td>2</td>\n<td>deserialize data into a PHP entity (<code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, <code class=\"language-text\">DELETE</code>); update the entity retrieved using the data provider (<code class=\"language-text\">PUT</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ValidateListener</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td><code class=\"language-text\">PRE_VALIDATE</code>, <code class=\"language-text\">POST_VALIDATE</code></td>\n<td>64</td>\n<td><a href=\"/docs/core/validation/\">validate data</a> (<code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">WriteListener</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td><code class=\"language-text\">PRE_WRITE</code>, <code class=\"language-text\">POST_WRITE</code></td>\n<td>32</td>\n<td>persist changes in the persistence system using the <a href=\"/docs/core/data-persisters/\">data persisters</a> (<code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>, <code class=\"language-text\">DELETE</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">SerializeListener</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td><code class=\"language-text\">PRE_SERIALIZE</code>, <code class=\"language-text\">POST_SERIALIZE</code></td>\n<td>16</td>\n<td>serialize the PHP entity in string <a href=\"/docs/core/content-negotiation/\">according to the request format</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">RespondListener</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td><code class=\"language-text\">PRE_RESPOND</code>, <code class=\"language-text\">POST_RESPOND</code></td>\n<td>8</td>\n<td>transform serialized to a <code class=\"language-text\">Symfony\\Component\\HttpFoundation\\Response</code> instance</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AddLinkHeaderListener</code></td>\n<td><code class=\"language-text\">kernel.response</code></td>\n<td>None</td>\n<td>0</td>\n<td>add a <code class=\"language-text\">Link</code> HTTP header pointing to the Hydra documentation</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ValidationExceptionListener</code></td>\n<td><code class=\"language-text\">kernel.exception</code></td>\n<td>None</td>\n<td>0</td>\n<td>serialize validation exceptions in the Hydra format</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ExceptionListener</code></td>\n<td><code class=\"language-text\">kernel.exception</code></td>\n<td>None</td>\n<td>-96</td>\n<td>serialize PHP exceptions in the Hydra format (including the stack trace in debug mode)</td>\n</tr>\n</tbody>\n</table>\n<p>Those built-in listeners are always executed for routes managed by API Platform. Registering your own event listeners to\nadd extra logic is convenient.</p>\n<p>The <a href=\"https://github.com/api-platform/core/blob/master/src/EventListener/EventPriorities.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">ApiPlatform\\Core\\EventListener\\EventPriorities</code></a> class comes with a convenient set of class's constants corresponding to commonly used priorities:</p>\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Event</th>\n<th>Priority</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">PRE_READ</code></td>\n<td><code class=\"language-text\">kernel.request</code></td>\n<td>5</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">POST_READ</code></td>\n<td><code class=\"language-text\">kernel.request</code></td>\n<td>3</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">PRE_DESERIALIZE</code></td>\n<td><code class=\"language-text\">kernel.request</code></td>\n<td>3</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">POST_DESERIALIZE</code></td>\n<td><code class=\"language-text\">kernel.request</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">PRE_VALIDATE</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td>65</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">POST_VALIDATE</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td>63</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">PRE_WRITE</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td>33</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">POST_WRITE</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td>31</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">PRE_SERIALIZE</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td>17</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">POST_SERIALIZE</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td>15</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">PRE_RESPOND</code></td>\n<td><code class=\"language-text\">kernel.view</code></td>\n<td>9</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">POST_RESPOND</code></td>\n<td><code class=\"language-text\">kernel.response</code></td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>Some of those built-in listeners can be enabled/disabled by setting request attributes (<a href=\"/docs/core/operations/#recommended-method\">for instance in the <code class=\"language-text\">defaults</code>\nattribute of an operation</a>):</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">_api_receive</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables the <code class=\"language-text\">ReadListener</code>, <code class=\"language-text\">DeserializeListener</code> and <code class=\"language-text\">ValidateListener</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">_api_respond</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables <code class=\"language-text\">SerializeListener</code>, <code class=\"language-text\">RespondListener</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">_api_persist</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables <code class=\"language-text\">WriteListener</code></td>\n</tr>\n</tbody>\n</table>","editPath":"core/events.md","title":"The Event System","previous":{"slug":"/docs/core/pagination/","title":"Pagination"},"next":{"slug":"/docs/core/content-negotiation/","title":"Content Negotiation"}}}