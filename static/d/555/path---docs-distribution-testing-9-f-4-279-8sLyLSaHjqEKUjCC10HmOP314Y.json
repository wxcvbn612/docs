{"pageContext":{"html":"<h1 id=\"testing-and-specifying-the-api\"><a href=\"#testing-and-specifying-the-api\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing and Specifying the API</h1>\n<p>A set of useful tools to specify and test your API are easily installable in the API Platform distribution:</p>\n<ul>\n<li><a href=\"https://phpunit.de/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a> allows to cover your classes with unit tests and to write functional tests thanks to his\nSymfony integration.</li>\n<li><a href=\"http://docs.behat.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behat</a> (a <a href=\"http://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behavior-driven development</a>\nframework) and its <a href=\"https://github.com/Behatch/contexts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behatch extension</a> (a set of contexts dedicated to REST API and\nJSON documents) are convenient to specify and test your API: write the API specification as user stories and in natural\nlanguage then execute these scenarios against the application to validate its behavior.</li>\n</ul>\n<p>Take a look at <a href=\"https://symfony.com/doc/current/testing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Symfony documentation about testing</a> to learn how to use\nPHPUnit in your API Platform project.</p>\n<p>Installing Behat is easy enough following these steps:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php composer require --dev behat/behat\n$ docker-compose exec php vendor/bin/behat -V\n$ docker-compose exec php vendor/bin/behat --init</code></pre></div>\n<p>This will install Behat in your project and creates a directory <code class=\"language-text\">features</code> where you can place your feature file(s).</p>\n<p>Here is an example of a <a href=\"http://docs.behat.org/en/latest/user_guide/gherkin.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gherkin</a> feature file specifying the behavior\nof <a href=\"/docs/distribution/index/\">the bookstore API we created in the tutorial</a>. Thanks to Behatch, this feature file can be executed against\nthe API without having to write a single line of PHP.</p>\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre class=\"language-gherkin\"><code class=\"language-gherkin\"><span class=\"token comment\"># features/books.feature</span>\n<span class=\"token feature\"><span class=\"token keyword\">Feature:</span><span class=\"token important\"> Manage books and their reviews</span>\n  In order to manage books and their reviews\n  As a client software developer\n  I need to be able to retrieve, create, update and delete them through the API.\n\n  </span><span class=\"token comment\"># the \"@createSchema\" annotation provided by API Platform creates a temporary SQLite database for testing the API</span>\n  <span class=\"token tag\">@createSchema</span>\n  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Create a book</span></span>\n    <span class=\"token atrule\">When</span> I add <span class=\"token string\">\"Content-Type\"</span> header equal to <span class=\"token string\">\"application/ld+json\"</span>\n    <span class=\"token atrule\">And</span> I add <span class=\"token string\">\"Accept\"</span> header equal to <span class=\"token string\">\"application/ld+json\"</span>\n    <span class=\"token atrule\">And</span> I send a <span class=\"token string\">\"POST\"</span> request to <span class=\"token string\">\"/books\"</span> with body:\n    <span class=\"token pystring string\">\"\"\"\n    {\n      \"isbn\": \"9781782164104\",\n      \"title\": \"Persistence in PHP with the Doctrine ORM\",\n      \"description\": \"This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.\",\n      \"author\": \"KÃ©vin Dunglas\",\n      \"publicationDate\": \"2013-12-01\"\n    }\n    \"\"\"</span>\n    <span class=\"token atrule\">Then</span> the response status code should be 201\n    <span class=\"token atrule\">And</span> the response should be in JSON\n    <span class=\"token atrule\">And</span> the header <span class=\"token string\">\"Content-Type\"</span> should be equal to <span class=\"token string\">\"application/ld+json; charset=utf-8\"</span>\n    <span class=\"token atrule\">And</span> the JSON should be equal to:\n    <span class=\"token pystring string\">\"\"\"\n    {\n      \"@context\": \"/contexts/Book\",\n      \"@id\": \"/books/1\",\n      \"@type\": \"Book\",\n      \"id\": 1,\n      \"isbn\": \"9781782164104\",\n      \"title\": \"Persistence in PHP with the Doctrine ORM\",\n      \"description\": \"This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.\",\n      \"author\": \"K\\u00e9vin Dunglas\",\n      \"publicationDate\": \"2013-12-01T00:00:00+00:00\",\n      \"reviews\": []\n    }\n    \"\"\"</span>\n\n  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Retrieve the book list</span></span>\n    <span class=\"token atrule\">When</span> I add <span class=\"token string\">\"Accept\"</span> header equal to <span class=\"token string\">\"application/ld+json\"</span>\n    <span class=\"token atrule\">And</span> I send a <span class=\"token string\">\"GET\"</span> request to <span class=\"token string\">\"/books\"</span>\n    <span class=\"token atrule\">Then</span> the response status code should be 200\n    <span class=\"token atrule\">And</span> the response should be in JSON\n    <span class=\"token atrule\">And</span> the header <span class=\"token string\">\"Content-Type\"</span> should be equal to <span class=\"token string\">\"application/ld+json; charset=utf-8\"</span>\n    <span class=\"token atrule\">And</span> the JSON should be equal to:\n    <span class=\"token pystring string\">\"\"\"\n    {\n      \"@context\": \"/contexts/Book\",\n      \"@id\": \"/books\",\n      \"@type\": \"hydra:Collection\",\n      \"hydra:member\": [\n        {\n          \"@id\": \"/books/1\",\n          \"@type\": \"Book\",\n          \"id\": 1,\n          \"isbn\": \"9781782164104\",\n          \"title\": \"Persistence in PHP with the Doctrine ORM\",\n          \"description\": \"This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.\",\n          \"author\": \"K\\u00e9vin Dunglas\",\n          \"publicationDate\": \"2013-12-01T00:00:00+00:00\",\n          \"reviews\": []\n        }\n      ],\n      \"hydra:totalItems\": 1\n    }\n    \"\"\"</span>\n\n  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Throw errors when a post is invalid</span></span>\n    <span class=\"token atrule\">When</span> I add <span class=\"token string\">\"Content-Type\"</span> header equal to <span class=\"token string\">\"application/ld+json\"</span>\n    <span class=\"token atrule\">And</span> I add <span class=\"token string\">\"Accept\"</span> header equal to <span class=\"token string\">\"application/ld+json\"</span>\n    <span class=\"token atrule\">And</span> I send a <span class=\"token string\">\"POST\"</span> request to <span class=\"token string\">\"/books\"</span> with body:\n    <span class=\"token pystring string\">\"\"\"\n    {\n      \"isbn\": \"1312\",\n      \"title\": \"\",\n      \"description\": \"Yo!\",\n      \"author\": \"Me!\",\n      \"publicationDate\": \"2016-01-01\"\n    }\n    \"\"\"</span>\n    <span class=\"token atrule\">Then</span> the response status code should be 400\n    <span class=\"token atrule\">And</span> the response should be in JSON\n    <span class=\"token atrule\">And</span> the header <span class=\"token string\">\"Content-Type\"</span> should be equal to <span class=\"token string\">\"application/ld+json; charset=utf-8\"</span>\n    <span class=\"token atrule\">And</span> the JSON should be equal to:\n    <span class=\"token pystring string\">\"\"\"\n    {\n      \"@context\": \"/contexts/ConstraintViolationList\",\n      \"@type\": \"ConstraintViolationList\",\n      \"hydra:title\": \"An error occurred\",\n      \"hydra:description\": \"isbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.\\ntitle: This value should not be blank.\",\n      \"violations\": [\n        {\n          \"propertyPath\": \"isbn\",\n          \"message\": \"This value is neither a valid ISBN-10 nor a valid ISBN-13.\"\n        },\n        {\n          \"propertyPath\": \"title\",\n          \"message\": \"This value should not be blank.\"\n        }\n      ]\n    }\n    \"\"\"</span>\n\n  <span class=\"token comment\"># The \"@dropSchema\" annotation must be added on the last scenario of the feature file to drop the temporary SQLite database</span>\n  <span class=\"token tag\">@dropSchema</span>\n    <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Add a review</span></span>\n    <span class=\"token atrule\">When</span> I add <span class=\"token string\">\"Content-Type\"</span> header equal to <span class=\"token string\">\"application/ld+json\"</span>\n    <span class=\"token atrule\">When</span> I add <span class=\"token string\">\"Accept\"</span> header equal to <span class=\"token string\">\"application/ld+json\"</span>\n    <span class=\"token atrule\">And</span> I send a <span class=\"token string\">\"POST\"</span> request to <span class=\"token string\">\"/reviews\"</span> with body:\n    <span class=\"token pystring string\">\"\"\"\n    {\n      \"rating\": 5,\n      \"body\": \"Must have!\",\n      \"author\": \"Foo Bar\",\n      \"publicationDate\": \"2016-01-01\",\n      \"book\": \"/books/1\"\n    }\n    \"\"\"</span>\n    <span class=\"token atrule\">Then</span> the response status code should be 201\n    <span class=\"token atrule\">And</span> the response should be in JSON\n    <span class=\"token atrule\">And</span> the header <span class=\"token string\">\"Content-Type\"</span> should be equal to <span class=\"token string\">\"application/ld+json; charset=utf-8\"</span>\n    <span class=\"token atrule\">And</span> the JSON should be equal to:\n    <span class=\"token pystring string\">\"\"\"\n    {\n      \"@context\": \"/contexts/Review\",\n      \"@id\": \"/reviews/1\",\n      \"@type\": \"Review\",\n      \"id\": 1,\n      \"rating\": 5,\n      \"body\": \"Must have!\",\n      \"author\": \"Foo Bar\",\n      \"publicationDate\": \"2016-01-01T00:00:00+00:00\",\n      \"book\": \"/books/1\"\n    }\n    \"\"\"</span></code></pre></div>\n<p>The API Platform flavor of Behat also comes with a temporary SQLite database dedicated to tests. It works out of the box.</p>\n<p>Clear the cache of the <code class=\"language-text\">test</code> environment:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php bin/console cache:clear --env=test</code></pre></div>\n<p>Then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php vendor/bin/behat</code></pre></div>\n<p>Everything should be green now. Your Linked Data API is now specified and tested thanks to Behat!</p>\n<p>You may also be interested in these alternative testing tools (not included in the API Platform distribution):</p>\n<ul>\n<li><a href=\"https://www.getpostman.com/docs/writing_tests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postman tests</a> (proprietary): create functional test for your API Platform project\nusing a nice UI, benefit from <a href=\"https://www.getpostman.com/docs/importing_swagger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Swagger integration</a> and run tests\ntest in the CI using <a href=\"https://github.com/postmanlabs/newman\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">newman</a>.</li>\n<li><a href=\"https://github.com/coduo/php-matcher\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHP Matcher</a>: the Swiss Army knife of JSON document testing.</li>\n</ul>\n<h2 id=\"running-unit-tests-with-phpunit\"><a href=\"#running-unit-tests-with-phpunit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running Unit Tests with PHPUnit</h2>\n<p>To install <a href=\"https://phpunit.de/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a> test suite, execute the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php composer require --dev symfony/phpunit-bridge</code></pre></div>\n<p>To run your <a href=\"https://phpunit.de/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a> test suite, execute the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php bin/phpunit</code></pre></div>","editPath":"distribution/testing.md","title":"Testing and Specifying the API","previous":{"slug":"/docs/distribution/","title":"Getting Started with API Platform: Hypermedia and GraphQL API, Admin and Progressive Web App"},"next":{"slug":"/docs/distribution/debugging/","title":"Debugging"}}}