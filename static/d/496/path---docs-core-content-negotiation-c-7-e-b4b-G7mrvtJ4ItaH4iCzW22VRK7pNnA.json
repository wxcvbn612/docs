{"pageContext":{"html":"<h1 id=\"content-negotiation\"><a href=\"#content-negotiation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content Negotiation</h1>\n<p>The API system has built-in <a href=\"https://en.wikipedia.org/wiki/Content_negotiation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">content negotiation</a> capabilities.\nIt leverages the <a href=\"https://github.com/willdurand/Negotiation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">willdurand/negotiation</code></a> library.</p>\n<p>By default, only the <a href=\"https://json-ld.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON-LD</a> format is enabled. However API Platform Core supports many more formats and can be extended.</p>\n<p>The framework natively supports JSON-LD, GraphQL, JSONAPI, HAL, raw JSON, XML, YAML and CSV (YAML and CSV support is only available if you use Symfony 3.2+).</p>\n<p>Both XML and JSON formats are experimental and there are no assurance that we will not break them.</p>\n<p>API Platform Core will automatically detect the best resolving format depending on:</p>\n<ul>\n<li>enabled formats (see below)</li>\n<li>the requested format, specified in either the <code class=\"language-text\">Accept</code> HTTP header or as an extension appended to the URL</li>\n</ul>\n<p>Available formats are:</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Format name</th>\n<th>MIME types</th>\n<th>Backward Compatibility guaranteed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://json-ld.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON-LD</a></td>\n<td><code class=\"language-text\">jsonld</code></td>\n<td><code class=\"language-text\">application/ld+json</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"/docs/core/graphql/\">GraphQL</a></td>\n<td>n/a</td>\n<td>n/a</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"http://jsonapi.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSONAPI</a></td>\n<td><code class=\"language-text\">jsonapi</code></td>\n<td><code class=\"language-text\">application/vnd.api+json</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"http://stateless.co/hal_specification.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HAL</a></td>\n<td><code class=\"language-text\">jsonhal</code></td>\n<td><code class=\"language-text\">application/hal+json</code></td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://www.json.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON</a></td>\n<td><code class=\"language-text\">json</code></td>\n<td><code class=\"language-text\">application/json</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://www.w3.org/XML/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XML</a></td>\n<td><code class=\"language-text\">xml</code></td>\n<td><code class=\"language-text\">application/xml</code>, <code class=\"language-text\">text/xml</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"http://yaml.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YAML</a></td>\n<td><code class=\"language-text\">yaml</code></td>\n<td><code class=\"language-text\">application/x-yaml</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://tools.ietf.org/html/rfc4180\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSV</a></td>\n<td><code class=\"language-text\">csv</code></td>\n<td><code class=\"language-text\">text/csv</code></td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://whatwg.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML</a> (API docs)</td>\n<td><code class=\"language-text\">html</code></td>\n<td><code class=\"language-text\">text/html</code></td>\n<td>no</td>\n</tr>\n</tbody>\n</table>\n<p>If the client requested format is not specified (if it's not supported, it will throw an HTTP bad request error), the response format will be the first format defined in the <code class=\"language-text\">formats</code> configuration key (see below).\nAn example using the built-in XML support is available in <a href=\"https://github.com/api-platform/core/blob/master/features/main/content_negotiation.feature\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behat specs</a>.</p>\n<p>The API Platform content negotiation system is extendable. Support for other formats can be added by <a href=\"https://symfony.com/doc/current/serializer.html#adding-normalizers-and-encoders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">creating and registering appropriate encoders and, sometimes, normalizers</a>. Adding support for other\nstandard hypermedia formats upstream is welcome. Don't hesitate to contribute by adding your encoders and normalizers\nto API Platform Core.</p>\n<h2 id=\"enabling-several-formats\"><a href=\"#enabling-several-formats\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling Several Formats</h2>\n<p>The first required step is to configure allowed formats. The following configuration will enable the support of XML (built-in)\nand of a custom format called <code class=\"language-text\">myformat</code> and having <code class=\"language-text\">application/vnd.myformat</code> as <a href=\"https://en.wikipedia.org/wiki/Media_type\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MIME type</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n\n    <span class=\"token key atrule\">formats</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">jsonld</span><span class=\"token punctuation\">:</span>   <span class=\"token punctuation\">[</span><span class=\"token string\">'application/ld+json'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">jsonhal</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'application/hal+json'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">jsonapi</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'application/vnd.api+json'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">json</span><span class=\"token punctuation\">:</span>     <span class=\"token punctuation\">[</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">xml</span><span class=\"token punctuation\">:</span>      <span class=\"token punctuation\">[</span><span class=\"token string\">'application/xml'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/xml'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">yaml</span><span class=\"token punctuation\">:</span>     <span class=\"token punctuation\">[</span><span class=\"token string\">'application/x-yaml'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">csv</span><span class=\"token punctuation\">:</span>      <span class=\"token punctuation\">[</span><span class=\"token string\">'text/csv'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span>     <span class=\"token punctuation\">[</span><span class=\"token string\">'text/html'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">myformat</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'application/vnd.myformat'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>To enable GraphQL support, <a href=\"/docs/core/graphql/\">read the dedicated chapter</a>.</p>\n<p>Because the Symfony Serializer component is able to serialize objects in XML, sending an <code class=\"language-text\">Accept</code> HTTP header with the\n<code class=\"language-text\">text/xml</code> string as value is enough to retrieve XML documents from our API. However API Platform knows nothing about the\n<code class=\"language-text\">myformat</code> format. We need to register an encoder and optionally a normalizer for this format.</p>\n<h2 id=\"enabling-additional-formats-on-a-specific-resourceoperation\"><a href=\"#enabling-additional-formats-on-a-specific-resourceoperation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling Additional Formats On a Specific Resource/Operation</h2>\n<p>Support for specific formats can also be added at resource or operation level, using the <code class=\"language-text\">formats</code> attribute.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"formats\"={\"xml\", \"jsonld\", \"csv\"={\"text/csv\"}}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>In the example above, <code class=\"language-text\">xml</code> or <code class=\"language-text\">jsonld</code> will be allowed and there is no need to specify the mime types as they are already defined in the configuration.\nAdditionally the <code class=\"language-text\">csv</code> format is added with the mime type <code class=\"language-text\">text/csv</code>.</p>\n<p>It is also important to notice that the usage of this attribute will override the formats defined in the configuration, therefore\nthis configuration might disable the <code class=\"language-text\">json</code> or the <code class=\"language-text\">html</code> on this resource for example.</p>\n<p>You can specify different accepted formats at operation level too:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n*      collectionOperations={\"get\"={\"formats\"={\"xml\"={\"text/xml\"}}}},\n*      attributes={\"formats\"={\"jsonld\", \"csv\"={\"text/csv\"}}}\n*  )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>As an alternative to annotations, you can also use XML or YAML, the example above would become:</p>\n<p>XML:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://api-platform.com/schema/metadata<span class=\"token punctuation\">\"</span></span>\n           <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n           <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://api-platform.com/schema/metadata\n           https://api-platform.com/schema/metadata/metadata-2.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resource</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>App\\Entity\\Greeting<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collectionOperations</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collectionOperation</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>formats<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span><span class=\"token punctuation\">></span></span>text/xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attribute</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attribute</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token comment\">&lt;!-- works also with &lt;attribute name=\"xml\">text/xml&lt;/attribute> --></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attribute</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collectionOperation</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collectionOperations</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>formats<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span><span class=\"token punctuation\">></span></span>jsonld<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attribute</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- format already defined in the config --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>csv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>text/csv<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attribute</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attribute</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resource</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>YAML:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">App\\Entity\\Book</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">collectionOperations</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">get</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">formats</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token key atrule\">xml</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'text/xml'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># works also with \"text/html\"</span>\n        <span class=\"token key atrule\">attributes</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">formats</span><span class=\"token punctuation\">:</span>\n               <span class=\"token key atrule\">0</span><span class=\"token punctuation\">:</span> 'jsonld' <span class=\"token comment\"># format already defined in the config</span>\n               <span class=\"token key atrule\">csv</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/csv'</span></code></pre></div>\n<h2 id=\"registering-a-custom-serializer\"><a href=\"#registering-a-custom-serializer\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Registering a Custom Serializer</h2>\n<p>If you are adding support for a format not supported by default by API Platform nor by the Symfony Serializer Component,\nyou need to create custom encoder, decoder and eventually a normalizer and a denormalizer. Refer to the\nSymfony documentation to learn <a href=\"https://symfony.com/doc/current/cookbook/serializer.html#adding-normalizers-and-encoders\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">how to create and register such classes</a>.</p>\n<p>API Platform Core will automatically call the serializer with your defined format name (<code class=\"language-text\">myformat</code> in previous examples)\nas <code class=\"language-text\">format</code> parameter during the deserialization process. Then it will return the result to the client with the asked MIME\ntype using its built-in responder.</p>\n<h2 id=\"writing-a-custom-normalizer\"><a href=\"#writing-a-custom-normalizer\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing a Custom Normalizer</h2>\n<p>Using composition is the recommended way to implement a custom normalizer. You can use the following template to start with your\nown implementation of <code class=\"language-text\">CustomItemNormalizer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">'App\\Serializer\\CustomItemNormalizer'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'@api_platform.serializer.normalizer.item'</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># Uncomment if you don't use the autoconfigure feature</span>\n        <span class=\"token comment\">#tags: [ 'serializer.normalizer' ]</span>\n    \n    <span class=\"token comment\"># ...</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Serializer/CustomItemNormalizer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Serializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Normalizer<span class=\"token punctuation\">\\</span>DenormalizerInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Normalizer<span class=\"token punctuation\">\\</span>NormalizerInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomItemNormalizer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NormalizerInterface</span><span class=\"token punctuation\">,</span> DenormalizerInterface\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$normalizer</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>NormalizerInterface <span class=\"token variable\">$normalizer</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$normalizer</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DenormalizerInterface</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The normalizer must implement the DenormalizerInterface'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">normalizer</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$normalizer</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">denormalize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">normalizer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">denormalize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$class</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">supportsDenormalization</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">normalizer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">supportsDenormalization</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$object</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">normalizer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$object</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">supportsNormalization</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">normalizer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">supportsNormalization</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>For example if you want to make the <code class=\"language-text\">csv</code> format work for even complex entities with a lot of hierarchy, you have to\nflatten or remove too complex relations:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Serializer/CustomItemNormalizer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Serializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Normalizer<span class=\"token punctuation\">\\</span>DenormalizerInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Normalizer<span class=\"token punctuation\">\\</span>NormalizerInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomItemNormalizer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NormalizerInterface</span><span class=\"token punctuation\">,</span> DenormalizerInterface\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$object</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">normalizer</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$object</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'csv'</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">array_keys</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_keys</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">array_keys</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">unset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>","editPath":"core/content-negotiation.md","title":"Content Negotiation","previous":{"slug":"/docs/core/events/","title":"The Event System"},"next":{"slug":"/docs/core/deprecations/","title":"Deprecating Resources and Properties (Alternative to Versioning)"}}}