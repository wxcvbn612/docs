{"pageContext":{"html":"<h1 id=\"graphql-support\"><a href=\"#graphql-support\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Support</h1>\n<h2 id=\"overall-view\"><a href=\"#overall-view\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overall View</h2>\n<p><a href=\"http://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL</a> is a query language made to communicate with an API and therefore is an alternative to REST.</p>\n<p>It has some advantages compared to REST: it solves the over-fetching or under-fetching of data, is strongly typed, and is capable of retrieving multiple and nested data in one time; but it also comes with drawbacks: for example it creates overhead depending of the request.</p>\n<p>API Platform creates a REST API by default. But you can choose to enable GraphQL as well.</p>\n<p>Once enabled, you have nothing to do: your schema describing your API is automatically built and your GraphQL endpoint is ready to go!</p>\n<h2 id=\"enabling-graphql\"><a href=\"#enabling-graphql\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling GraphQL</h2>\n<p>To enable GraphQL and GraphiQL interface in your API, simply require the <a href=\"https://webonyx.github.io/graphql-php/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">graphql-php</a> package using Composer and clear the cache one more time:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose <span class=\"token function\">exec</span> php composer req webonyx/graphql-php <span class=\"token operator\">&amp;&amp;</span> bin/console cache:clear</code></pre></div>\n<p>You can now use GraphQL at the endpoint: <code class=\"language-text\">https://localhost:8443/graphql</code>.</p>\n<h2 id=\"graphiql\"><a href=\"#graphiql\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphiQL</h2>\n<p>If Twig is installed in your project, go to the GraphQL endpoint with your browser. You will see a nice interface provided by GraphiQL to interact with your API.</p>\n<p>If you need to disable it, it can be done in the configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">graphiql</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token comment\"># ...            </span></code></pre></div>\n<h2 id=\"filters\"><a href=\"#filters\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filters</h2>\n<p>Filters are supported out-of-the-box. Follow the <a href=\"/docs/core/filters/\">filters</a> documentation and your filters will be available as arguments of queries.</p>\n<p>However you don't necessarily have the same needs for your GraphQL endpoint as for your REST one.</p>\n<p>In the <code class=\"language-text\">ApiResource</code> declaration, you can choose to decorrelate the GraphQL filters in <code class=\"language-text\">query</code> of the <code class=\"language-text\">graphql</code> attribute.\nIn order to keep the default behavior (possibility to fetch, delete, update or create), define all the operations (<code class=\"language-text\">query</code>, <code class=\"language-text\">delete</code>, <code class=\"language-text\">update</code> and <code class=\"language-text\">create</code>).</p>\n<p>For example, this entity will have a search filter for REST and a date filter for GraphQL:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     attributes={\n *         \"filters\"={\"offer.search_filter\"}\n *     },\n *     graphql={\n *         \"query\"={\n *              \"filters\"={\"offer.date_filter\"}\n *          },\n *          \"delete\",\n *          \"update\",\n *          \"create\"\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h3 id=\"filtering-on-nested-properties\"><a href=\"#filtering-on-nested-properties\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering on Nested Properties</h3>\n<p>Unlike for REST, all built-in filters support nested properties using the underscore (<code class=\"language-text\">_</code>) syntax instead of the dot (<code class=\"language-text\">.</code>) syntax, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>OrderFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>SearchFilter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource\n * @ApiFilter(OrderFilter::class, properties={\"product.releaseDate\"})\n * @ApiFilter(SearchFilter::class, properties={\"product.color\": \"exact\"})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>The above allows you to find offers by their respective product's color like for the REST Api.\nYou can then filter using the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">product_color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        product <span class=\"token punctuation\">{</span>\n          name\n          color\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or order your results like:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">order</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">product_releaseDate</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"DESC\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        product <span class=\"token punctuation\">{</span>\n          name\n          color\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another difference with the REST API filters is that the keyword <code class=\"language-text\">_list</code> must be used instead of the traditional <code class=\"language-text\">[]</code> to filter over multiple values.</p>\n<p>For example, if you want to search the offers with a green or a red product you can use the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">product_color_list</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        product <span class=\"token punctuation\">{</span>\n          name\n          color\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"security-access_control\"><a href=\"#security-access_control\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Security (<code class=\"language-text\">access_control</code>)</h2>\n<p>To add a security layer to your queries and mutations, follow the <a href=\"/docs/core/security/\">security</a> documentation.</p>\n<p>If your security needs differ between REST and GraphQL, add the particular parts in the <code class=\"language-text\">graphql</code> key.</p>\n<p>In the example below, we want the same security rules as we have in REST, but we also want to allow an admin to delete a book only in GraphQL.\nPlease note that, it's not possible to update a book in GraphQL because the <code class=\"language-text\">update</code> operation is not defined.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     attributes={\"access_control\"=\"is_granted('ROLE_USER')\"},\n *     collectionOperations={\n *         \"post\"={\"access_control\"=\"is_granted('ROLE_ADMIN')\", \"access_control_message\"=\"Only admins can add books.\"}\n *     },\n *     itemOperations={\n *         \"get\"={\"access_control\"=\"is_granted('ROLE_USER') and object.owner == user\", \"access_control_message\"=\"Sorry, but you are not the book owner.\"}\n *     },\n *     graphql={\n *         \"query\"={\"access_control\"=\"is_granted('ROLE_USER') and object.owner == user\"},\n *         \"delete\"={\"access_control\"=\"is_granted('ROLE_ADMIN')\"},\n *         \"create\"={\"access_control\"=\"is_granted('ROLE_ADMIN')\"}\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2 id=\"serialization-groups\"><a href=\"#serialization-groups\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serialization Groups</h2>\n<p>You may want to restrict some resource's attributes to your GraphQL clients.</p>\n<p>As described in the <a href=\"/docs/core/serialization/\">serialization process</a> documentation, you can use serialization groups to expose only the attributes you want in queries or in mutations.</p>\n<p>If the (de)normalization context between GraphQL and REST is different, use the <code class=\"language-text\">graphql</code> key to change it.</p>\n<p>Note that:</p>\n<ul>\n<li>A <strong>query</strong> is only using the normalization context.</li>\n<li>A <strong>mutation</strong> is using the denormalization context for its input and the normalization context for its output.</li>\n</ul>\n<p>The following example shows you what can be done:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>Groups</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     normalizationContext={\"groups\"={\"read\"}},\n *     denormalizationContext={\"groups\"={\"write\"}},\n *     graphql={\n *         \"query\"={\"normalization_context\"={\"groups\"={\"query\"}}},\n *         \"create\"={\n *             \"normalization_context\"={\"groups\"={\"query\"}},\n *             \"denormalization_context\"={\"groups\"={\"mutation\"}}\n *         }\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">/**\n     * @Groups({\"read\", \"write\", \"query\"})\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @Groups({\"read\", \"mutation\"})\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$author</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>In this case, the REST endpoint will be able to get the two attributes of the book and to modify only its name.</p>\n<p>The GraphQL endpoint will be able to query only the name. It will only be able to create a book with an author.\nWhen doing this mutation, the author of the created book will not be returned (the name will be instead).</p>","editPath":"core/graphql.md","title":"GraphQL Support","previous":{"slug":"/docs/core/operations/","title":"Operations"},"next":{"slug":"/docs/core/filters/","title":"Filters"}}}