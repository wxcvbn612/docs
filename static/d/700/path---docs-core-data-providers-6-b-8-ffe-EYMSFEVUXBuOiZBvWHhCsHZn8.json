{"pageContext":{"html":"<h1 id=\"data-providers\"><a href=\"#data-providers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Providers</h1>\n<p>To retrieve data exposed by the API, API Platform uses classes called <strong>data providers</strong>. A data provider using <a href=\"http://www.doctrine-project.org/projects/orm.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Doctrine\nORM</a> to retrieve data from a database, a data provider using\n<a href=\"https://www.doctrine-project.org/projects/mongodb-odm.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Doctrine MongoDB ODM</a> to retrieve data from a document\ndatabase, and a data provider using <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elasticsearch-PHP</a>\nto retrieve data from an Elasticsearch cluster are included with the library. The first one is enabled by default. These\ndata providers natively support paged collections and filters. They can be used as is and fits perfectly with common usages.</p>\n<p>However, you sometime want to retrieve data from other sources such as another persistence layer or a webservice.\nCustom data providers can be used to do so. A project can include as many data providers as it needs. The first able to\nretrieve data for a given resource will be used.</p>\n<p>For a given resource, you can implement two kind of interfaces:</p>\n<ul>\n<li>the <a href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/CollectionDataProviderInterface.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">CollectionDataProviderInterface</code></a>\nis used when fetching a collection.</li>\n<li>the <a href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/ItemDataProviderInterface.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">ItemDataProviderInterface</code></a>\nis used when fetching items.</li>\n</ul>\n<p>Both implementations can also implement a third, optional interface called\n<a href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/RestrictedDataProviderInterface.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">'RestrictedDataProviderInterface'</a>\nif you want to limit their effects to a single resource or operation.</p>\n<p>In the following examples we will create custom data providers for an entity class called <code class=\"language-text\">App\\Entity\\BlogPost</code>.\nNote, that if your entity is not Doctrine-related, you need to flag the identifier property by using <code class=\"language-text\">@ApiProperty(identifier=true)</code> for things to work properly (see also <a href=\"/docs/core/serialization/#entity-identifier-case\">Entity Identifier Case</a>).</p>\n<h2 id=\"custom-collection-data-provider\"><a href=\"#custom-collection-data-provider\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Collection Data Provider</h2>\n<p>First, your <code class=\"language-text\">BlogPostCollectionDataProvider</code> has to implement the <a href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/CollectionDataProviderInterface.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">CollectionDataProviderInterface</code></a>:</p>\n<p>The <code class=\"language-text\">getCollection</code> method must return an <code class=\"language-text\">array</code>, a <code class=\"language-text\">Traversable</code> or a <a href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/PaginatorInterface.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">ApiPlatform\\Core\\DataProvider\\PaginatorInterface</code></a> instance.\nIf no data is available, you should return an empty array.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/DataProvider/BlogPostCollectionDataProvider.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>DataProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>CollectionDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>RestrictedDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>ResourceClassNotSupportedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>BlogPost</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostCollectionDataProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CollectionDataProviderInterface</span><span class=\"token punctuation\">,</span> RestrictedDataProviderInterface\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> bool\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> BlogPost<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getCollection</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \\<span class=\"token package\">Generator</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Retrieve the blog post collection from somewhere</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlogPost</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlogPost</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>If you use the default configuration, the corresponding service will be automatically registered thanks to <a href=\"https://symfony.com/doc/current/service_container/autowiring.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">autowiring</a>.\nTo declare the service explicitly, or to set a custom priority, you can use the following snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">'App\\DataProvider\\BlogPostCollectionDataProvider'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.collection_data_provider'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">priority</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2 </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># Autoconfiguration must be disabled to set a custom priority</span>\n        <span class=\"token key atrule\">autoconfigure</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre></div>\n<p>Tagging the service with the tag <code class=\"language-text\">api_platform.collection_data_provider</code> will enable API Platform Core to automatically\nregister and use this data provider. The optional attribute <code class=\"language-text\">priority</code> allows to define the order in which the\ndata providers are called. The first data provider not throwing a <code class=\"language-text\">ApiPlatform\\Core\\Exception\\ResourceClassNotSupportedException</code>\nwill be used.</p>\n<h2 id=\"custom-item-data-provider\"><a href=\"#custom-item-data-provider\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Item Data Provider</h2>\n<p>The process is similar for item data providers. Create a <code class=\"language-text\">BlogPostItemDataProvider</code> implementing the <a href=\"https://github.com/api-platform/core/blob/master/src/DataProvider/ItemDataProviderInterface.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">ItemDataProviderInterface</code></a>\ninterface:</p>\n<p>The <code class=\"language-text\">getItem</code> method can return <code class=\"language-text\">null</code> if no result has been found.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/DataProvider/BlogPostItemDataProvider.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>DataProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>ItemDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>RestrictedDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>ResourceClassNotSupportedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>BlogPost</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostItemDataProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ItemDataProviderInterface</span><span class=\"token punctuation\">,</span> RestrictedDataProviderInterface\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> bool\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> BlogPost<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>BlogPost\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Retrieve the blog post item from somewhere then return it or null if not found</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlogPost</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>If service autowiring and autoconfiguration are enabled (it's the case by default), you are done!</p>\n<p>Otherwise, if you use a custom dependency injection configuration, you need to register the corresponding service and add the\n<code class=\"language-text\">api_platform.item_data_provider</code> tag to it. As for collection data providers, the <code class=\"language-text\">priority</code> attribute can be used to order\nproviders.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">'App\\DataProvider\\BlogPostItemDataProvider'</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span>\n        <span class=\"token comment\"># Uncomment only if autoconfiguration is disabled</span>\n        <span class=\"token comment\">#tags: [ 'api_platform.item_data_provider' ]</span></code></pre></div>\n<h2 id=\"injecting-the-serializer-in-an-itemdataprovider\"><a href=\"#injecting-the-serializer-in-an-itemdataprovider\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Injecting the Serializer in an <code class=\"language-text\">ItemDataProvider</code></h2>\n<p>In some cases, you may need to inject the <code class=\"language-text\">Serializer</code> in your <code class=\"language-text\">DataProvider</code>. There are no issues with the\n<code class=\"language-text\">CollectionDataProvider</code>, but when injecting it in the <code class=\"language-text\">ItemDataProvider</code> it will throw a <code class=\"language-text\">CircularReferenceException</code>.</p>\n<p>For this reason, we implemented the <code class=\"language-text\">SerializerAwareDataProviderInterface</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/DataProvider/BlogPostItemDataProvider.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>DataProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>ItemDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>SerializerAwareDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>SerializerAwareDataProviderTrait</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>ResourceClassNotSupportedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>BlogPost</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostItemDataProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ItemDataProviderInterface</span><span class=\"token punctuation\">,</span> SerializerAwareDataProviderInterface\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">SerializerAwareDataProviderTrait</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> bool\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> BlogPost<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>BlogPost\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Retrieve data from anywhere you want, in a custom format</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'...'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Deserialize data using the Serializer</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> BlogPost<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'custom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2 id=\"injecting-extensions-pagination-filter-eagerloading-etc\"><a href=\"#injecting-extensions-pagination-filter-eagerloading-etc\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Injecting Extensions (Pagination, Filter, EagerLoading etc.)</h2>\n<p>ApiPlatform provides a few extensions that you can reuse in your custom DataProvider.\nNote that there are a few kind of extensions which are detailed in <a href=\"/docs/core/extensions/\">their own chapter of the documentation</a>.\nBecause extensions are tagged services, you can use the <a href=\"https://symfony.com/blog/new-in-symfony-3-4-simpler-injection-of-tagged-services\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">injection of tagged services</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">'App\\DataProvider\\BlogPostItemDataProvider'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">$itemExtensions</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!tagged</span> api_platform.doctrine.orm.query_extension.item</code></pre></div>\n<p>Or in XML:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>services</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>App\\DataProvider\\BlogPostItemDataProvider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>argument</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>$itemExtensions<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tagged<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tag</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>api_platform.doctrine.orm.query_extension.item<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>services</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Your data provider will now have access to the core extensions, here is an example on how to use them:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/DataProvider/BlogPostItemDataProvider.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>DataProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Util<span class=\"token punctuation\">\\</span>QueryNameGenerator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>ItemDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>DataProvider<span class=\"token punctuation\">\\</span>RestrictedDataProviderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>ResourceClassNotSupportedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>BlogPost</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>Common<span class=\"token punctuation\">\\</span>Persistence<span class=\"token punctuation\">\\</span>ManagerRegistry</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostItemDataProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ItemDataProviderInterface</span><span class=\"token punctuation\">,</span> RestrictedDataProviderInterface\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$itemExtensions</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$managerRegistry</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>ManagerRegistry <span class=\"token variable\">$managerRegistry</span><span class=\"token punctuation\">,</span> iterable <span class=\"token variable\">$itemExtensions</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">managerRegistry</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$managerRegistry</span><span class=\"token punctuation\">;</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">itemExtensions</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$itemExtensions</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> bool\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> BlogPost<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>BlogPost\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$manager</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">managerRegistry</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getManagerForClass</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$repository</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$manager</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$queryBuilder</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$repository</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$queryNameGenerator</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryNameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$identifiers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">itemExtensions</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$extension</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$extension</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">applyToItem</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$queryBuilder</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$queryNameGenerator</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$identifiers</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$operationName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$extension</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">QueryResultItemExtensionInterface</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$extension</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">supportsResult</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$operationName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                 <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token variable\">$extension</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$queryBuilder</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$operationName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$queryBuilder</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getOneOrNullResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>","editPath":"core/data-providers.md","title":"Data Providers","previous":{"slug":"/docs/core/security/","title":"Security"},"next":{"slug":"/docs/core/data-persisters/","title":"Data Persisters"}}}