{"pageContext":{"html":"<h1 id=\"deploying-an-api-platform-app-on-heroku\"><a href=\"#deploying-an-api-platform-app-on-heroku\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploying an API Platform App on Heroku</h1>\n<p><a href=\"http://heroku.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heroku</a> is a popular, fast, scalable and reliable <em>Platform As A Service</em> (PaaS). As Heroku offers a\nfree plan including database support through <a href=\"https://www.heroku.com/postgres\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heroku Postgres</a>, it's\na convenient way to experiment with the API Platform.</p>\n<p>The API Platform Heroku integration also supports MySQL databases provided by <a href=\"https://addons.heroku.com/cleardb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the ClearDB add-on</a>.</p>\n<p>Deploying API Platform applications on Heroku is straightforward and you will learn how to do it in this tutorial.</p>\n<p><em>Note: this tutorial works perfectly well with API Platform but also with any Symfony application based on the Symfony Standard\nEdition.</em></p>\n<p>If you don't already have one, <a href=\"https://signup.heroku.com/signup/dc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create an account on Heroku</a>. Then install <a href=\"https://devcenter.heroku.com/articles/getting-started-with-php#local-workstation-setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Heroku\ntoolbelt</a>. We guess you already\nhave a working install of <a href=\"http://getcomposer.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composer</a>, perfect, we will need it.</p>\n<p>Create a new API Platform project as usual:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">composer create-project api-platform/api-platform</code></pre></div>\n<p>Heroku relies on <a href=\"https://devcenter.heroku.com/articles/config-vars\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">environment variables</a> for its configuration. Regardless\nof what provider you choose for hosting your application, using environment variables to configure your production environment\nis a best practice supported out of the box by API Platform.</p>\n<p>Create a Heroku's <code class=\"language-text\">app.json</code> file at the root of the <code class=\"language-text\">api/</code> directory to configure the deployment:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"success_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"APP_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prod\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"APP_SECRET\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"generator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"CORS_ALLOW_ORIGIN\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://your-client-url.com\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"addons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"heroku-postgresql\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"buildpacks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/heroku/heroku-buildpack-php\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"postdeploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"php bin/console doctrine:schema:create\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The file also tells the Heroku deployment system to build a PHP container and to add the Postgres add-on.</p>\n<p>We are almost done, but API Platform (and Symfony) has a particular directory structure which requires further configuration.\nWe must tell Heroku that the document root is <code class=\"language-text\">public/</code>, and that all other directories must be private.</p>\n<p>Create a new file named <code class=\"language-text\">Procfile</code> in the <code class=\"language-text\">api/</code> directory with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span> vendor/bin/heroku<span class=\"token punctuation\">-</span>php<span class=\"token punctuation\">-</span>apache2 public/</code></pre></div>\n<p>Be sure to add the Apache Pack in your dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">composer require symfony/apache-pack</code></pre></div>\n<p>As Heroku doesn't support Varnish out of the box, let's disable its integration:</p>\n<div class=\"gatsby-highlight\" data-language=\"patch\"><pre class=\"language-patch\"><code class=\"language-patch\"># api/config/packages/api_platform.yaml\n-    http_cache:\n-        invalidation:\n-            enabled: true\n-            varnish_urls: [&#39;%env(VARNISH_URL)%&#39;]\n-        max_age: 0\n-        shared_max_age: 3600\n-        vary: [&#39;Content-Type&#39;, &#39;Authorization&#39;]\n-        public: true</code></pre></div>\n<p>Heroku provides another free service, <a href=\"https://devcenter.heroku.com/articles/logplex\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Logplex</a>, which allows us to centralize\nand persist applications logs. Because API Platform writes logs on <code class=\"language-text\">STDERR</code>, it will work seamlessly.</p>\n<p>However, if you use Monolog instead of the default logger, you'll need to configure it to output to <code class=\"language-text\">STDERR</code> instead of\nin a file.</p>\n<p>Open <code class=\"language-text\">api/config/packages/prod/monolog.yaml</code> and apply the following patch:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">monolog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">handlers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">nested</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> stream\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"%kernel.logs_dir%/%kernel.environment%.log\"</span>\n            <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span> debug\n+       nested<span class=\"token punctuation\">:</span>\n+           type<span class=\"token punctuation\">:</span> stream\n+           path<span class=\"token punctuation\">:</span> <span class=\"token string\">'php://stderr'</span>\n+           level<span class=\"token punctuation\">:</span> debug</code></pre></div>\n<p>We are now ready to deploy our app!</p>\n<p>Go to the <code class=\"language-text\">api/</code> directory, then</p>\n<ol>\n<li>\n<p>Initialize a git repository:</p>\n<p>git init</p>\n</li>\n<li>\n<p>Add all existing files:</p>\n<p>git add --all</p>\n</li>\n<li>\n<p>Commit:</p>\n<p>git commit -a -m \"My first API Platform app running on Heroku!\"</p>\n</li>\n<li>\n<p>Create the Heroku application:</p>\n<p>heroku create</p>\n</li>\n<li>\n<p>And deploy for the first time:</p>\n<p>git push heroku master</p>\n</li>\n</ol>\n<p><strong>We're done.</strong> You can play with the demo bookstore API provided with API Platform. It is ready for production and you\ncan scale it in one click from the Heroku interface.</p>\n<p>To see your logs, run <code class=\"language-text\">heroku logs --tail</code>.</p>","editPath":"deployment/heroku.md","title":"Deploying an API Platform App on Heroku","previous":{"slug":"/docs/deployment/kubernetes/","title":"Deploying to a Kubernetes Cluster"},"next":{"slug":"/docs/deployment/traefik/","title":"Implement Traefik Into API Platform Dockerized"}}}