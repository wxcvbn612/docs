{"pageContext":{"html":"<h1 id=\"troubleshooting\"><a href=\"#troubleshooting\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Troubleshooting</h1>\n<p>This is a list of common pitfalls on using API Platform, and how to avoid them.</p>\n<h2 id=\"using-docker\"><a href=\"#using-docker\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Docker</h2>\n<h3 id=\"with-docker-toolbox-on-windows\"><a href=\"#with-docker-toolbox-on-windows\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>With Docker Toolbox on Windows</h3>\n<p>Docker Toolbox is not supported anymore by API Platform. Please upgrade to <a href=\"https://www.docker.com/docker-windows\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker for Windows</a>.</p>\n<h3 id=\"error-starting-userland-proxy\"><a href=\"#error-starting-userland-proxy\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error starting userland proxy</h3>\n<p>If the <code class=\"language-text\">app</code> container cannot start and display this <code class=\"language-text\">Error starting userland proxy: Bind for 0.0.0.0:80</code>, it means that port 80 is already in use. You can check to see which processes are currently listening on certain ports.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Find out if any service listens on port 80.</span>\n<span class=\"token comment\"># You can use this command on UNIX-based OSes like MacOS and Linux.</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">lsof</span> -n -i :80 <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> LISTEN\n\n<span class=\"token comment\"># For Windows, you can use netstat. </span>\n<span class=\"token comment\"># This will give you all TCP/IP network connections and not just processes listening to port 80.</span>\n<span class=\"token function\">netstat</span> -a -b</code></pre></div>\n<p>You can change the port to be used in the <code class=\"language-text\">docker-compose.yml</code> file (default is port 80).</p>\n<h2 id=\"using-api-platform-and-jms-serializer-in-the-same-project\"><a href=\"#using-api-platform-and-jms-serializer-in-the-same-project\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using API Platform and JMS Serializer in the same project</h2>\n<p>For the latest versions of <a href=\"http://jmsyst.com/bundles/JMSSerializerBundle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JMSSerializerBundle</a>, there is no conflict so everything should work out of the box.</p>\n<p>If you are still using the old, unmaintained v1 of JMSSerializerBundle, the best way should be to <a href=\"https://github.com/schmittjoh/JMSSerializerBundle/blob/2.4.2/UPGRADING.md#upgrading-from-1x-to-20\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">upgrade to v2</a> of JMSSerializerBundle.</p>\n<p>In v1 of JMSSerializerBundle, the <code class=\"language-text\">serializer</code> alias is registered for the JMS Serializer service by default. However, API Platform requires the Symfony Serializer (and not the JMS one) to work properly. If you cannot upgrade for some reason, this behavior can be deactivated using the following configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/config.yml</span>\n\n<span class=\"token key atrule\">jms_serializer</span><span class=\"token punctuation\">:</span>\n    enable_short_alias<span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre></div>\n<p>The JMS Serializer service is available as <code class=\"language-text\">jms_serializer</code>.</p>\n<h2 id=\"upstream-sent-too-big-header-while-reading-response-header-from-upstream-502-error\"><a href=\"#upstream-sent-too-big-header-while-reading-response-header-from-upstream-502-error\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>\"upstream sent too big header while reading response header from upstream\" 502 Error</h2>\n<p>Some of your API calls fail with a 502 error and the logs for the api container shows the following error message <code class=\"language-text\">upstream sent too big header while reading response header from upstream</code>. </p>\n<p>This can be due to the cache invalidation headers that are too big for NGINX. When you query the API, API Platform adds the ids of all returned entities and their dependencies in the headers like so : <code class=\"language-text\">Cache-Tags: /entity/1,/dependent_entity/1,/entity/2</code>. This can overflow the default header size (4k) when your API gets larger and more complex.</p>\n<p>You can modify the <code class=\"language-text\">api/docker/nginx/conf.d/default.conf</code> file and set values to <code class=\"language-text\">fastcgi_buffer_size</code> and <code class=\"language-text\">fastcgi_buffers</code> that suit your needs, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n    root /srv/api/public;\n\n    location / {\n        # try to serve file directly, fallback to index.php\n        try_files $uri /index.php$is_args$args;\n    }\n\n    location ~ ^/index\\.php(/|$) {\n        # Comment the next line and uncomment the next to enable dynamic resolution (incompatible with Kubernetes)\n        fastcgi_pass php:9000;\n        #resolver 127.0.0.11;\n        #set $upstream_host php;\n        #fastcgi_pass $upstream_host:9000;\n        \n        # Bigger buffer size to handle cache invalidation headers expansion\n        fastcgi_buffer_size 32k;\n        fastcgi_buffers 8 16k;\n\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n        # When you are using symlinks to link the document root to the\n        # current version of your application, you should pass the real\n        # application path instead of the path to the symlink to PHP\n        # FPM.\n        # Otherwise, PHP&#39;s OPcache may not properly detect changes to\n        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126\n        # for more information).\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        fastcgi_param DOCUMENT_ROOT $realpath_root;\n        # Prevents URIs that include the front controller. This will 404:\n        # http://domain.tld/index.php/some-path\n        # Remove the internal directive to allow URIs like this\n        internal;\n    }\n\n    # return 404 for all other php files not matching the front controller\n    # this prevents access to other php files you don&#39;t want to be accessible.\n    location ~ \\.php$ {\n      return 404;\n    }\n}</code></pre></div>\n<p>You then need to rebuild your containers by running <code class=\"language-text\">docker-compose build</code>.</p>","editPath":"extra/troubleshooting.md","title":"Troubleshooting","previous":{"slug":"/docs/extra/philosophy/","title":"API Platform's Philosophy"},"next":{"slug":"/docs/extra/contribution-guides/","title":"Contribution guides"}}}